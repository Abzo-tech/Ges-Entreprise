#!/bin/bash

# Script de test rapide pour v√©rifier la correction du bug logo

echo "=========================================="
echo "Test de la correction du bug logo NULL"
echo "=========================================="
echo ""

# Couleurs
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -d "backend" ] || [ ! -d "frontend" ]; then
    echo -e "${RED}‚ùå Erreur: Ce script doit √™tre ex√©cut√© depuis la racine du projet${NC}"
    exit 1
fi

echo "1Ô∏è‚É£  V√©rification de la structure des fichiers..."
echo ""

# V√©rifier les fichiers modifi√©s
files_to_check=(
    "frontend/src/components/LogoUploader.jsx"
    "frontend/src/pages/Entreprises.jsx"
    "backend/src/controllers/FileController.ts"
)

all_files_exist=true
for file in "${files_to_check[@]}"; do
    if [ -f "$file" ]; then
        echo -e "${GREEN}‚úì${NC} $file"
    else
        echo -e "${RED}‚úó${NC} $file (manquant)"
        all_files_exist=false
    fi
done

if [ "$all_files_exist" = false ]; then
    echo -e "${RED}‚ùå Certains fichiers sont manquants${NC}"
    exit 1
fi

echo ""
echo "2Ô∏è‚É£  V√©rification du code LogoUploader.jsx..."
echo ""

# V√©rifier que autoUpload est pr√©sent
if grep -q "autoUpload = true" frontend/src/components/LogoUploader.jsx; then
    echo -e "${GREEN}‚úì${NC} Prop 'autoUpload' ajout√©"
else
    echo -e "${RED}‚úó${NC} Prop 'autoUpload' manquant"
fi

# V√©rifier la logique conditionnelle
if grep -q "if (autoUpload && entrepriseId)" frontend/src/components/LogoUploader.jsx; then
    echo -e "${GREEN}‚úì${NC} Logique conditionnelle d'upload pr√©sente"
else
    echo -e "${RED}‚úó${NC} Logique conditionnelle d'upload manquante"
fi

echo ""
echo "3Ô∏è‚É£  V√©rification du code Entreprises.jsx..."
echo ""

# V√©rifier que pendingLogoFile n'existe plus
if grep -q "pendingLogoFile" frontend/src/pages/Entreprises.jsx; then
    echo -e "${YELLOW}‚ö†${NC}  Variable 'pendingLogoFile' encore pr√©sente (devrait √™tre supprim√©e)"
else
    echo -e "${GREEN}‚úì${NC} Variable 'pendingLogoFile' supprim√©e"
fi

# V√©rifier que autoUpload={false} est pr√©sent
if grep -q "autoUpload={false}" frontend/src/pages/Entreprises.jsx; then
    echo -e "${GREEN}‚úì${NC} Prop 'autoUpload={false}' configur√©"
else
    echo -e "${RED}‚úó${NC} Prop 'autoUpload={false}' manquant"
fi

# V√©rifier l'upload apr√®s cr√©ation
if grep -q "Uploading logo for entreprise" frontend/src/pages/Entreprises.jsx; then
    echo -e "${GREEN}‚úì${NC} Log d'upload apr√®s cr√©ation pr√©sent"
else
    echo -e "${RED}‚úó${NC} Log d'upload apr√®s cr√©ation manquant"
fi

echo ""
echo "4Ô∏è‚É£  V√©rification du code FileController.ts..."
echo ""

# V√©rifier l'import EntrepriseRepository
if grep -q "EntrepriseRepository" backend/src/controllers/FileController.ts; then
    echo -e "${GREEN}‚úì${NC} Import EntrepriseRepository pr√©sent"
else
    echo -e "${RED}‚úó${NC} Import EntrepriseRepository manquant"
fi

# V√©rifier la mise √† jour de la BDD
if grep -q "entrepriseRepository.update" backend/src/controllers/FileController.ts; then
    echo -e "${GREEN}‚úì${NC} Mise √† jour de la BDD pr√©sente"
else
    echo -e "${RED}‚úó${NC} Mise √† jour de la BDD manquante"
fi

echo ""
echo "5Ô∏è‚É£  Compilation du backend..."
echo ""

cd backend
if npm run build > /dev/null 2>&1; then
    echo -e "${GREEN}‚úì${NC} Backend compile sans erreurs"
else
    echo -e "${RED}‚úó${NC} Erreurs de compilation du backend"
    cd ..
    exit 1
fi
cd ..

echo ""
echo "6Ô∏è‚É£  Compilation du frontend..."
echo ""

cd frontend
if npm run build > /dev/null 2>&1; then
    echo -e "${GREEN}‚úì${NC} Frontend compile sans erreurs"
else
    echo -e "${RED}‚úó${NC} Erreurs de compilation du frontend"
    cd ..
    exit 1
fi
cd ..

echo ""
echo "7Ô∏è‚É£  V√©rification du r√©pertoire uploads..."
echo ""

if [ -d "backend/uploads/logos" ]; then
    echo -e "${GREEN}‚úì${NC} R√©pertoire uploads/logos existe"
else
    echo -e "${YELLOW}‚ö†${NC}  R√©pertoire uploads/logos n'existe pas (sera cr√©√© au d√©marrage)"
fi

echo ""
echo "=========================================="
echo -e "${GREEN}‚úÖ Tous les tests de v√©rification passent !${NC}"
echo "=========================================="
echo ""
echo "üìã Prochaines √©tapes :"
echo ""
echo "1. Red√©marrer le backend :"
echo "   cd backend && npm start"
echo ""
echo "2. Tester l'upload d'un logo :"
echo "   - Cr√©er une nouvelle entreprise"
echo "   - S√©lectionner un logo JPEG ou PNG"
echo "   - Cliquer sur 'Cr√©er'"
echo "   - V√©rifier que le logo s'affiche"
echo ""
echo "3. V√©rifier en base de donn√©es :"
echo "   SELECT id, nom, logo FROM entreprise ORDER BY id DESC LIMIT 5;"
echo ""
echo "4. Consulter la documentation :"
echo "   - CORRECTION_LOGO_NULL.md (ce bug)"
echo "   - LOGO_UPLOAD_FIX.md (documentation compl√®te)"
echo "   - GUIDE_TEST_LOGO.md (guide de test)"
echo ""